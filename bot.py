from aiogram import Bot, types, asyncio
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor, exceptions
from aiogram.utils.markdown import hlink
import config
import scenario
import markups as mark
from time import sleep as sl


from config import TOKEN, YOOTOKEN

ytoken = YOOTOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

f = list(open ('TextScenario.txt', encoding = 'Windows-1251'))
a = list(open ('Answers.txt', encoding = 'Windows-1251'))
photo = open('YOU DIED.jpg', 'rb')
leo = open('DiCaprio.jpg', 'rb')


@dp.message_handler(commands = ['menu'])
async def menu(message: types.Message):
	await bot.send_message(message.chat.id, "–°–ø–æ–º–æ—â—å—é –º–µ–Ω—é, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup = mark.Menu)

@dp.message_handler(commands = ['start'])
async def start(message: types.Message):
	await bot.send_message(message.chat.id, "*–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π?*", parse_mode= 'Markdown', reply_markup=mark.background)
	sl(1)

#-------------V-–ë–õ–û–ö –î–û–ù–ê–¢–ê-V------------

@dp.message_handler()
async def bot_message(message: types.Message):
	if message.text == '–ß–∞—à–µ—á–∫–∞ –∫–æ—Ñ–µ –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤‚òï':
		await bot.send_invoice(message.chat.id, title ="–ß–∞—à–µ—á–∫–∞ –∫–æ—Ñ–µ –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤‚òï", description = "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞–ª–∞—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—Å. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã, –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–æ–π —á–∞—à–µ—á–∫–µ –∫–æ—Ñ–µ, –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞—à–∞ –∏–≥—Ä–∞ ‚ù§", payload = "–ß–∞—à–µ—á–∫–∞ –∫–æ—Ñ–µ‚òï", provider_token = ytoken, currency="rub", photo_url = 'https://srisovki.one/wp-content/uploads/2021/05/image_562404190714424312763-768x834.jpg', photo_height=512, photo_width=512, photo_size=512, start_parameter = "test_pay", prices = [{"label": "–ú–∞–Ω–∏-–º–∞–Ω–∏", "amount": 7000}])
	
	if message.text == '–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–ºüë®‚Äçüíª':
		await message.answer('<a href="https://t.me/vuorg">–û–±–∫–∞—à–ª—è—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–∏–∫–æ–≤</a>', parse_mode=types.ParseMode.HTML)

@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
	await bot.answer_pre_checkout_query(pre_checkout_query.id, ok = True)

@dp.message_handler(content_types=['successful_payment'])
async def process_successful_payment(message: types.Message):
	if message.successful_payment.invoice_payload == "–ß–∞—à–µ—á–∫–∞ –∫–æ—Ñ–µ‚òï":
		await bot.send_photo(message.from_user.id, text="–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ –Ø—Ä–∏–∫—É.", photo = leo)

#--------------V-–ë–õ–û–ö –ò–ì–†–´-V------------

@dp.callback_query_handler(text_startswith="answer_")
async def call_back(call: types.CallbackQuery):
	
	await bot.delete_message(call.from_user.id, call.message.message_id) #–£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
	if call.data  == "answer_yes":
		await bot.send_message(call.from_user.id, scenario.nachalo)

	elif call.data == "answer_no":
		pass

	await bot.send_message(call.message.chat.id, '****–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è****' )
	sl(3)
	await bot.send_message(call.message.chat.id, '****–ó–≤—É–∫ —Å–∫—Ä–µ–∂–µ—Ç–∞ –ø–æ–º–µ—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏****' )
	sl(3)

	for i, line in enumerate(f):
		if i < 7:
			orig_text = line
			msg = await bot.send_message(call.from_user.id, 'I')
			sl(0.1)
			tbp = orig_text[:1]
			for x in orig_text[1:]:
				try:
					await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
					sl(0.1)
					tbp += x
					await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

				except exceptions.RetryAfter as e:
					await asyncio.sleep(e.timeout)
			sl(2)

	await bot.send_message(call.from_user.id, "–í—Å–µ –¥–∞–≤–Ω–æ —Å–¥–æ—Ö–ª–∏, –Ω–∞ —á—Ç–æ —è –Ω–∞–¥–µ—é—Å—å‚Ä¶", reply_markup=mark.button1)
	sl(2)


@dp.callback_query_handler(text_startswith="first_")
async def call_back1(call: types.CallbackQuery):
	await bot.delete_message(call.from_user.id, call.message.message_id) #–£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
	if call.data  == "first_answer1":
		
		orig_text = "–¢–≤–æ—é –º–∞—Ç—å!  –≠—Ç–∞ —à—Ç—É–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
		msg = await bot.send_message(call.from_user.id, 'I')
		sl(0.1)
		tbp = orig_text[:1]
		for x in orig_text[1:]:
			try:
				await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
				sl(0.1)
				tbp += x
				await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

			except exceptions.RetryAfter as e:
				await asyncio.sleep(e.timeout)
		sl(2)

	elif call.data == "first_answer2":
	
		orig_text =  "–ë–æ–∂–µ, —è —É–≤–µ—Ä–æ–≤–∞–ª!"
		msg = await bot.send_message(call.from_user.id, 'I')
		sl(0.1)
		tbp = orig_text[:1]
		for x in orig_text[1:]:
			try:
				await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
				sl(0.1)
				tbp += x
				await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

			except exceptions.RetryAfter as e:
				await asyncio.sleep(e.timeout)
		sl(2)

	for i, line in enumerate(f):
		if i > 7 and i < 14:
			orig_text = line
			msg = await bot.send_message(call.from_user.id, 'I')
			sl(0.1)
			tbp = orig_text[:1]
			for x in orig_text[1:]:
				try:
					await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
					sl(0.1)
					tbp += x
					await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

				except exceptions.RetryAfter as e:
					await asyncio.sleep(e.timeout)
			sl(2)

	await bot.send_message(call.message.chat.id, "–•–æ—Ç—å —Å –∫–µ–º-—Ç–æ‚Ä¶", reply_markup=mark.button2)
	sl(2)


@dp.callback_query_handler(text_startswith="second_")
async def call_back2(call: types.CallbackQuery):
	await bot.delete_message(call.from_user.id, call.message.message_id)
	if call.data  == "second_answer3" or call.data == "second_answer4":
	
		for i, line in enumerate(f):
			if i > 14 and i < 25:
				orig_text = line
				msg = await bot.send_message(call.from_user.id, 'I')
				sl(0.1)
				tbp = orig_text[:1]
				for x in orig_text[1:]:
					try:
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
						sl(0.1)
						tbp += x
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

					except exceptions.RetryAfter as e:
						await asyncio.sleep(e.timeout)
				sl(2)

		await bot.send_message(call.message.chat.id, "–ö–∞–∫ —É —Ç–µ–±—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞?", reply_markup=mark.button3)
		sl(2)

@dp.callback_query_handler(text_startswith="third_")
async def call_back3(call: types.CallbackQuery):
	await bot.delete_message(call.from_user.id, call.message.message_id)

	if call.data  == "third_answer5":

		orig_text = "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–ö–∞–∫ –∏ –≤—Å–µ–≥–¥–∞¬ª?"
		msg = await bot.send_message(call.from_user.id, 'I')
		sl(0.1)
		tbp = orig_text[:1]
		for x in orig_text[1:]:
			try:
				await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
				sl(0.1)
				tbp += x
				await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

			except exceptions.RetryAfter as e:
				await asyncio.sleep(e.timeout)
		sl(2)

	if call.data  == "third_answer6":

		for i, line in enumerate(a):
			if i > 0 and i < 3:
				orig_text = line
				msg = await bot.send_message(call.from_user.id, 'I')
				sl(0.1)
				tbp = orig_text[:1]
				for x in orig_text[1:]:
					try:
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
						sl(0.1)
						tbp += x
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

					except exceptions.RetryAfter as e:
						await asyncio.sleep(e.timeout)
				sl(2)

	await bot.send_message(call.message.chat.id, "–ì–¥–µ —Ç—ã –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?", reply_markup=mark.button4)
	sl(2)

@dp.callback_query_handler(text_startswith="fourth_")
async def call_back3(call: types.CallbackQuery):
	await bot.delete_message(call.from_user.id, call.message.message_id)
	if call.data  == "fourth_answer7" or  call.data == "fourth_answer8":
		
		for i, line in enumerate(f):
			if i > 25 and i < 92:
				orig_text = line
				msg = await bot.send_message(call.from_user.id, 'I')
				sl(0.1)
				tbp = orig_text[:1]
				for x in orig_text[1:]:
					try:
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
						sl(0.1)
						tbp += x
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

					except exceptions.RetryAfter as e:
						await asyncio.sleep(e.timeout)
				sl(2)

		await bot.send_message(call.message.chat.id, "–î–∞ –∏ –≤–æ–¥—ã –ø–æ—á—Ç–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å", reply_markup=mark.button5)
		sl(2)

@dp.callback_query_handler(text_startswith="fifth_")
async def call_back3(call: types.CallbackQuery):
	await bot.delete_message(call.from_user.id, call.message.message_id)
	if call.data  == "fifth_answer9":

		for i, line in enumerate(a):
			if i > 4 and i < 34:
				orig_text = line
				msg = await bot.send_message(call.from_user.id, 'I')
				sl(0.1)
				tbp = orig_text[:1]
				for x in orig_text[1:]:
					try:
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
						sl(0.1)
						tbp += x
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

					except exceptions.RetryAfter as e:
						await asyncio.sleep(e.timeout)
				sl(2)

	game_over=0
	if call.data  == "fifth_answer10":

		game_over=1

		for i, line in enumerate(a):
			if i > 34 and i < 65:
				orig_text = line
				msg = await bot.send_message(call.from_user.id, 'I')
				sl(0.1)
				tbp = orig_text[:1]
				for x in orig_text[1:]:
					try:
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=f'{tbp}|')
						sl(0.1)
						tbp += x
						await bot.edit_message_text(chat_id=call.from_user.id, message_id=msg.message_id, text=tbp)

					except exceptions.RetryAfter as e:
						await asyncio.sleep(e.timeout)
				sl(2)

		await bot.send_message(call.message.chat.id, "***–°–≤—è–∑—å –ø–æ—Ç–µ—Ä—è–Ω–∞***")
		sl(2)

		await bot.send_photo(call.message.chat.id, photo )
		sl(2)

		await bot.send_message(call.message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start")


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates = True)
